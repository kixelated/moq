#!/usr/bin/env just --justfile

# Using Just: https://github.com/casey/just?tab=readme-ov-file#installation

# List all of the available commands.
default:
  just --list

# Install any required dependencies.
setup:
	cargo install cargo-shear cargo-sort cargo-upgrades cargo-edit cargo-audit

# Run a localhost relay server
relay: auth
	# Run the relay server overriding the provided configuration file.
	cargo run --bin moq-relay moq-relay/dev.toml

# Run a localhost leaf server, connecting to the relay server
leaf: auth
	cargo run --bin moq-relay moq-relay/leaf.toml

# Generate an authentication key and token for clustering, ensuring only clusters get root access.
# You can use the same approach for user requests but scoped to specific paths.
auth:
	# Generate a random secret key for authentication.
	# By default, this uses HMAC-SHA256.
	if [ ! -f "dev/root.jwk" ]; then \
		cargo run --bin moq-token -- --key "dev/root.jwk" generate; \
	fi

	# Generate a token that allows us to publish and subscribe to all paths.
	# Obviously this needs to be secured in production.
	# The primary/secondary flags are used to change what gets published based on the client.
	if [ ! -f "dev/node.jwt" ]; then \
		cargo run --quiet --bin moq-token -- --key "dev/root.jwk" sign \
			--path "" \
			--subscribe "" \
			--subscribe-primary \
			--publish "" \
			--publish-secondary \
			> dev/node.jwt; \
	fi

# Download the video and convert it to a fragmented MP4 that we can stream
download name:
	@mkdir -p dev

	if [ ! -f dev/{{name}}.mp4 ]; then \
		wget -q $(just download-url {{name}}) -O dev/{{name}}.mp4; \
	fi

	if [ ! -f dev/{{name}}.fmp4 ]; then \
		ffmpeg -loglevel error -i dev/{{name}}.mp4 \
			-c:v copy \
			-f mp4 -movflags cmaf+separate_moof+delay_moov+skip_trailer+frag_every_frame \
			dev/{{name}}.fmp4; \
	fi

# Returns the URL for a test video.
download-url name:
	@case {{name}} in \
		bbb) echo "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4" ;; \
		tos) echo "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4" ;; \
		av1) echo "http://download.opencontent.netflix.com.s3.amazonaws.com/AV1/Sparks/Sparks-5994fps-AV1-10bit-1920x1080-2194kbps.mp4" ;; \
		hevc) echo "https://test-videos.co.uk/vids/jellyfish/mp4/h265/1080/Jellyfish_1080_10s_30MB.mp4" ;; \
		*) echo "unknown" && exit 1 ;; \
	esac

# Publish a video using ffmpeg to the localhost relay server
pub name addr='http://localhost:4443/demo':
	# Download the sample media.
	just download {{name}}

	# Pre-build the binary so we don't queue media while compiling.
	cargo build --bin hang

	# Run ffmpeg and pipe the output to hang
	ffmpeg -hide_banner -v quiet \
		-stream_loop -1 -re \
		-i "dev/{{name}}.fmp4" \
		-c copy \
		-f mp4 -movflags cmaf+separate_moof+delay_moov+skip_trailer+frag_every_frame \
		- | cargo run --bin hang -- publish "{{addr}}/{{name}}.hang"

# Publish a video using gstreamer to the localhost relay server
pub-gst name addr='http://localhost:4443/demo':
	# Download the sample media.
	just download {{name}}

	# Build the plugin
	cargo build -p hang-gst

	# Run gstreamer and pipe the output to our plugin
	GST_PLUGIN_PATH="${PWD}/target/debug${GST_PLUGIN_PATH:+:$GST_PLUGIN_PATH}" \
	gst-launch-1.0 -v -e multifilesrc location="dev/{{name}}.fmp4" loop=true ! qtdemux name=demux \
		demux.video_0 ! h264parse ! queue ! identity sync=true ! isofmp4mux name=mux chunk-duration=1 fragment-duration=1 ! hangsink url="{{addr}}/{{name}}.hang" tls-disable-verify=true \
		demux.audio_0 ! aacparse ! queue ! mux.

# Subscribe to a video using gstreamer
sub name addr='http://localhost:4443/demo':
	# Build the plugins
	cargo build -p hang-gst

	# Run gstreamer and pipe the output to our plugin
	# This will render the video to the screen
	GST_PLUGIN_PATH="${PWD}/target/debug${GST_PLUGIN_PATH:+:$GST_PLUGIN_PATH}" \
	gst-launch-1.0 -v -e hangsrc url="{{addr}}/{{name}}.hang" tls-disable-verify=true ! decodebin ! videoconvert ! autovideosink

# Publish a video using ffmpeg directly from hang to the localhost
serve name:
	# Download the sample media.
	just download {{name}}

	# Pre-build the binary so we don't queue media while compiling.
	cargo build --bin hang

	# Run ffmpeg and pipe the output to hang
	ffmpeg -hide_banner -v quiet \
		-stream_loop -1 -re \
		-i "dev/{{name}}.fmp4" \
		-c copy \
		-f mp4 -movflags cmaf+separate_moof+delay_moov+skip_trailer+frag_every_frame \
		- | cargo run --bin hang -- serve --listen "[::]:4443" --tls-generate "localhost"

# Publish the clock broadcast
# `action` is either `publish` or `subscribe`
clock action:
	if [ "{{action}}" != "publish" ] && [ "{{action}}" != "subscribe" ]; then \
		echo "Error: action must be 'publish' or 'subscribe', got '{{action}}'" >&2; \
		exit 1; \
	fi

	cargo run --bin moq-clock -- "http://localhost:4443" {{action}}

# Run the CI checks
check flags="":
	cargo test --all-targets --all-features {{flags}}
	cargo clippy --all-targets --all-features {{flags}} -- -D warnings
	cargo fmt --all --check

	# Make sure it actually compiles with WASM.
	cargo check -p hang-wasm --target wasm32-unknown-unknown

	# requires: cargo install cargo-shear
	cargo shear

	# requires: cargo install cargo-sort
	cargo sort --workspace --check

	# requires: cargo install cargo-audit
	cargo audit

# Automatically fix some issues.
fix flags="":
	cargo fix --allow-staged --all-targets --all-features {{flags}}
	cargo clippy --fix --allow-staged --all-targets --all-features {{flags}}
	cargo fmt --all

	# requires: cargo install cargo-shear
	cargo shear --fix

	# requires: cargo install cargo-sort
	cargo sort --workspace

	# requires: cargo install cargo-audit
	cargo audit

	# Update any patch versions
	cargo update

# Upgrade any tooling
upgrade:
	# Update any patch versions
	cargo update

	# Requires: cargo install cargo-upgrades cargo-edit
	cargo upgrade --incompatible

# Build the packages
build:
	cargo build
