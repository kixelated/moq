[server]
listen = "[::]:4444"

# Generate a self-signed certificate for the server.
# You should use a real certificate in production.
tls.generate = ["localhost:4444"]

# This clustering scheme is very very simple for now.
#
# There is a root node that is used to connect leaf nodes together.
# Announcements flow from leaf -> root -> leaf, but any subscriptions are leaf -> leaf.
# The root node can serve (user) subscriptions too.
#
# The root node is either missing the "root" field below or it's identifical to the "node" field.
# This node acts a server only, accepting incoming connections from leaf nodes and users alike.
#
# There can be any number of leaf nodes.
# These nodes will connect to the specified root address and announce themselves via MoQ as a "broadcast".
# All nodes will discover these broadcasts and connect to other nodes.
#
# This forms an NxN mesh of nodes.
# Broadcasts are announced between all nodes with no collision detection, so duplicates are possible.
# Subscriptions will be relayed from leaf to leaf, so at most you can have:
#  user -> leaf -> leaf -> user
[cluster]
# Connect to this hostname in order to discover other nodes.
connect = "localhost:4443"

# Use the token in this file when connecting to other nodes.
# `just leaf` will populate this file.
token = "dev/root.jwt"

# My hostname, which must be accessible from other nodes.
advertise = "localhost:4444"

# Each leaf node will connect to the root node and other nodes, using this configuration.
[client]
# QUIC uses TLS to have the client verify the server's identity.
# However if you're not worried about man-in-the-middle attacks, you can disable verification:
tls.disable_verify = true

# A better approach is to generate a server certificate and configure the client to accept it.
#
# If the server has a certificate generated by a public root CA (ex. Let's Encrypt), then that will work if the client connects to the indiciated domain.
# ex. a cert for *.quic.video will only be allowed if the root/node configuration below matches.
#
# Alternatively, you can generate a self-signed root CA and configure the client to accept it.
# tls.root = ["/path/to/root.pem"]
#
# This can be much more secure because the server doesn't need to be publically accessible.
# ex. You could host the root at a private `.internal` domain and generate a matching certificate.

[auth]
# `just leaf` will populate this file.
key = "dev/root.jwk"

# Allow any connection to `/demo/**` without a token.
path = { demo = "" }
