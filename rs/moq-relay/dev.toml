[log]
# Enable debug logging for development.
# The RUST_LOG environment variable will take precedence.
level = "debug"

[server]
# Listen for QUIC connections on UDP:4443
# Sometimes IPv6 causes issues; try 127.0.0.1:4443 instead.
listen = "[::]:4443"

# Generate a self-signed certificate for the given hostnames.
# This is used for local development, in conjunction with a fingerprint, or with TLS verification disabled.
tls.generate = ["localhost"]

# In production, we would use a real certificate from something like Let's Encrypt.
# Multiple certificates are supported; the first one that matches the SNI will be used.
# [[server.tls.cert]]
# chain = "dev/quic.video.pem"
# key = "dev/quic.video.key"


# Authentication is rather crude because it's GOOD ENOUGH for now.
#
# All authentication is performed at connection time and is based on path prefixes.
# If you're authenticated to publish to `foo/`, then you can publish `foo/bar` or `foo/baz`.
# Likewise, if you're authenticated to subscribe to `foo/`, then you can subscribe to `foo/bar` or `foo/baz`.
#
# Note that the trailing slash is very important.
# If you're authenticated to publish to `foo`, then you can ONLY publish to `foo`.
# Think of it like a file system, `foo.txt` is very different from `foo.text/`.
#
# If a root key is provided, then a moq-token must be provided in the connection URL.
# Specific paths can override the key or disable authentication entirely.
# For example, each customer can be given a unique path that only accepts tokens signed with their own key.
#
# A authenticated URL contains a path and a `?jwt=` query parameter.
#
# ## URL Path
# The path is used to scope the connection and determine the key to use.
# The longest matching path override is used to determine the key.
# For example, `foo/bar/` will use `foo/bar`, `foo`, or the root key if one of them is configured.
#
# All broadcast paths are relative to this URL path.
# If you connect to `foo/bar/` then subscribe to `baz`, then `foo/bar/baz` will be fetched.
# There's no way to break out of this scope with `../` or anything like that.
#
#
# ## JWT Token
# The `?jwt=` query parameter contains a base64 JSON token that is signed with the key.
#
# The token contains permissions for the connection.
# It specifies a few things:
# - root: The URL path MUST contain this path prefix. Defaults to "".
# - subscribe: The connection can subscribe to this path prefix, relative to the root. Defaults to None.
# - publish: The connection can publish to this path prefix relative to the root. Defaults to None.
#
# A practical example:
# - root: "hang/meeting-abc/"
# - subscribe: ""
# - publish: "alice/"
#
# This user would connect to `https://relay.quic.video/hang/meeting-abc/?token=...`
# If a special "hang" key is configured, then it will use that key, otherwise it will use the root key.
#
# Technically, the user could connect to `https://relay.quic.video/hang/meeting-abc/alice/?token=...`
# However, they would lose the ability to subscribe to other broadcasts in the room, but that may be intentional (write-only).
[auth]
# `just leaf` will generate a root key and set this value via the CLI
key = "dev/root.jwk"

# Special auth logic based on the path.
# In this case, we're disabling authentication for paths that start with `demo/` to make it easier to test.
[[auth.path]]
# NOTE: This automatically has a trailing `/` added so it doesn't match `/demo123/foo`
root = "demo"
key = ""
